#!/usr/bin/env ruby

require_relative '../environment'

require 'yajl'
require 'optparse'
require 'sip2'
require 'sip2/checksum_encoder'

options = {
  checksum_encoder: nil,
  continue_on_error: false,
  debug: false,
  error_detection: false,
  line_by_line: true,
  strip_extra_fields: false,
}
OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options]"
  opts.separator ""
  opts.separator "Options:"

  opts.on("-a", "--array", "Read messages from a JSON array.") do
    options[:line_by_line] = false
  end

  opts.on("-c", "--continue-on-error",
          "When parsing an object fails, continue with the next.",
          "The exit code will still be non-zero.",
          'This option does not apply when using `--array`.'
         ) do
    options[:continue_on_error] = true
  end

  opts.on("-C", "--checksum-encoder=<NAME>",
          "Reencode the message with Sip2::ChecksumEncoder::<NAME>",
          "before calculating the checksum, where <NAME> is one of:",
          *Sip2::ChecksumEncoder.constants.map { |c| sprintf("    %s", c) }
         ) do |name|
           options[:checksum_encoder] = name
  end

  opts.on("-E", "--error-detection",
          "Append error detection fields to the message",
         ) do |name|
           options[:error_detection] = true
  end

  opts.on("--strip-extra-fields",
          "Remove extra fields that are not part of the specification.",
         ) do
           options[:strip_extra_fields] = true
         end

  opts.on("-v", "--version", "Print version and exit.") do
    puts Sip2::VERSION
    exit
  end

  opts.on("-h", "--help", "Display this message.") do
    puts opts
    exit
  end

end.parse!

UnknownError = Class.new(StandardError)

checksum_encoder_name = options[:checksum_encoder] || ENV['SIP2_CHECKSUM_ENCODER']
checksum_encoder = Sip2::ChecksumEncoder[checksum_encoder_name] if checksum_encoder_name

encode = ->(obj) {
  Sip2.encode(
    obj,
    add_error_detection: options[:error_detection],
    checksum_encoder: checksum_encoder,
    strip_extra_fields: options[:strip_extra_fields]
  )
}

if options[:line_by_line]
  error_count = 0
  Yajl.load($stdin) do |obj|
    begin
      puts encode.call(obj)
    rescue Dry::Struct::Error => error
      warn "Invalid object: #{Yajl.dump(obj)}"
      if options[:continue_on_error]
        warn error.message
        error_count += 1
      else
        raise error
      end
    end
  end
  if error_count > 0
    warn sprintf(
      "WARNING: %d object%s could not be parsed",
      error_count,
      error_count == 1 ? "" : "s"
    )
    exit 1
  end
else
  data = Yajl.load($stdin)
  data.each do |obj|
    puts encode.call(obj)
  end
end
